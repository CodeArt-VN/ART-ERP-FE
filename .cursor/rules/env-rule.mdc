---
description: env service use
globs: ["**/*.ts"]
alwaysApply: true
---


# EnvService Usage Rules

## üéØ **M·ª•c ƒë√≠ch**
S·ª≠ d·ª•ng c√°c h√†m c√≥ s·∫µn trong `EnvService` thay v√¨ t·ª± vi·∫øt h√†m m·ªõi. ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n v√† t√°i s·ª≠ d·ª•ng code trong to√†n b·ªô ·ª©ng d·ª•ng.

## üìç **File √°p d·ª•ng**
- **√Åp d·ª•ng**: T·∫•t c·∫£ file `*.ts` (code files)

## ‚úÖ **C√°c h√†m n√™n s·ª≠ d·ª•ng t·ª´ EnvService**

### **Message & Notification**
```typescript
// ‚úÖ ƒê√∫ng - S·ª≠ d·ª•ng EnvService methods
this.env.showMessage('SUCCESS_MESSAGE', 'success');
this.env.showErrorMessage(error);
this.env.showAlert('ALERT_MESSAGE', 'SubHeader', 'Header');
this.env.showPrompt('PROMPT_MESSAGE', 'SubHeader', 'Header');
this.env.showLoading('LOADING_MESSAGE', promiseFunction);
this.env.actionConfirm('delete', items.length, 'items', 'Title', promiseFunction);
```

### **Translation**
```typescript
// ‚úÖ ƒê√∫ng - S·ª≠ d·ª•ng EnvService methods
const translatedText = await this.env.translateResource('MESSAGE_KEY');
const translatedText = await this.env.translateResource({ code: 'MESSAGE_KEY', value: 'dynamic_value' });
```

### **Storage & Cookie**
```typescript
// ‚úÖ ƒê√∫ng - S·ª≠ d·ª•ng EnvService methods
const value = await this.env.getStorage('key');
await this.env.setStorage('key', value);
await this.env.clearStorage();
this.env.setCookie('name', 'value', 7);
const cookieValue = this.env.getCookie('name');
this.env.clearCookie('name');
```

### **System Data**
```typescript
// ‚úÖ ƒê√∫ng - S·ª≠ d·ª•ng EnvService methods
const statusList = await this.env.getStatus('STATUS_CODE');
const typeList = await this.env.getType('TYPE_CODE', true); // true = get all children
const branchList = await this.env.getBranch(branchId, true);
const jobTitleList = await this.env.getJobTitle(jobTitleId, true);
const warehouses = await this.env.getWarehouses(true, false);
```

### **Permission & Branch**
```typescript
// ‚úÖ ƒê√∫ng - S·ª≠ d·ª•ng EnvService methods
const hasPermission = await this.env.checkFormPermission('/function/code');
await this.env.loadBranch();
this.env.changeBranch();
```

### **Event Publishing**
```typescript
// ‚úÖ ƒê√∫ng - S·ª≠ d·ª•ng EnvService methods
this.env.publishEvent({ Code: 'event:name', Value: data });
const events = this.env.getEvents();
```

## ‚ùå **Kh√¥ng n√™n l√†m**

### **T·ª± vi·∫øt h√†m m·ªõi**
```typescript
// ‚ùå Sai - T·ª± vi·∫øt h√†m show message
private showCustomMessage(message: string) {
    // Don't do this - use env.showMessage instead
    this.toastController.create({ message, duration: 3000 }).then(toast => toast.present());
}

// ‚ùå Sai - T·ª± vi·∫øt h√†m get status
private getCustomStatus(code: string) {
    // Don't do this - use env.getStatus instead
    return this.statusList.filter(s => s.Code === code);
}
```

### **Import tr·ª±c ti·∫øp c√°c service kh√°c**
```typescript
// ‚ùå Sai - Import tr·ª±c ti·∫øp ToastController
constructor(private toastController: ToastController) {}

// ‚ùå Sai - Import tr·ª±c ti·∫øp TranslateService  
constructor(private translate: TranslateService) {}
```

## üîß **C√°ch s·ª≠ d·ª•ng ƒë√∫ng**

### **1. Inject EnvService**
```typescript
constructor(private env: EnvService) {}
```

### **2. S·ª≠ d·ª•ng c√°c method c√≥ s·∫µn**
```typescript
// Thay v√¨ t·ª± vi·∫øt
async saveData() {
    try {
        const result = await this.apiService.save(data);
        // S·ª≠ d·ª•ng env.showMessage thay v√¨ t·ª± vi·∫øt
        this.env.showMessage('DATA_SAVED_SUCCESS', 'success');
        return result;
    } catch (error) {
        // S·ª≠ d·ª•ng env.showErrorMessage thay v√¨ t·ª± vi·∫øt
        this.env.showErrorMessage(error);
        throw error;
    }
}
```

### **3. S·ª≠ d·ª•ng translation c√≥ s·∫µn**
```typescript
// Thay v√¨ t·ª± vi·∫øt
async getTranslatedText() {
    // S·ª≠ d·ª•ng env.translateResource thay v√¨ t·ª± vi·∫øt
    const message = await this.env.translateResource('WELCOME_MESSAGE');
    return message;
}
```

## üìã **Danh s√°ch ƒë·∫ßy ƒë·ªß c√°c method c√≥ s·∫µn**

### **Core Methods**
- `showMessage(message, color, value, duration, showCloseButton, subHeader, header)`
- `showErrorMessage(err)`
- `showAlert(message, subHeader, header, okText)`
- `showPrompt(message, subHeader, header, okText, cancelText, inputs)`
- `showLoading(message, promise)`
- `actionConfirm(action, length, itemName, title, promise)`

### **Translation Methods**
- `translateResource(resource)`
- `setLang(value)`

### **Storage Methods**
- `getStorage(key)`
- `setStorage(key, value)`
- `clearStorage()`
- `setCookie(name, value, days)`
- `getCookie(name)`
- `clearCookie(name)`

### **System Data Methods**
- `getStatus(Code)`
- `getType(Code, AllChild)`
- `getBranch(Id, AllChild)`
- `getJobTitle(Id, AllChild)`
- `getWarehouses(getParents, IgnoredSelectedBranch)`
- `searchBranch(predicate)`

### **Permission & Branch Methods**
- `checkFormPermission(functionCode)`
- `loadBranch()`
- `changeBranch()`

### **Event Methods**
- `publishEvent(data)`
- `getEvents()`

### **Server Management Methods**
- `loadSelectedServer()`
- `changeServer(serverCode)`
- `loadLanguageForServer(lang?)`

## üí° **L·ª£i √≠ch c·ªßa vi·ªác tu√¢n th·ªß quy t·∫Øc**

1. **T√≠nh nh·∫•t qu√°n**: T·∫•t c·∫£ message, notification, translation ƒë·ªÅu c√≥ c√πng style v√† behavior
2. **T√°i s·ª≠ d·ª•ng**: Kh√¥ng duplicate code logic
3. **D·ªÖ maintain**: Ch·ªâ c·∫ßn s·ª≠a ·ªü m·ªôt n∆°i khi c√≥ thay ƒë·ªïi
4. **Performance**: C√°c method ƒë√£ ƒë∆∞·ª£c optimize v√† cache
5. **Testing**: D·ªÖ d√†ng mock v√† test c√°c method c√≥ s·∫µn

## üö® **L∆∞u √Ω quan tr·ªçng**

- **KH√îNG BAO GI·ªú** t·ª± vi·∫øt h√†m m·ªõi cho c√°c ch·ª©c nƒÉng ƒë√£ c√≥ trong EnvService
- Lu√¥n ki·ªÉm tra EnvService tr∆∞·ªõc khi implement ch·ª©c nƒÉng m·ªõi
- N·∫øu c·∫ßn ch·ª©c nƒÉng m·ªõi, h√£y th√™m v√†o EnvService thay v√¨ t·∫°o service ri√™ng
- Tu√¢n th·ªß quy t·∫Øc console logging: s·ª≠ d·ª•ng `dog && console.log()` cho dev logs
